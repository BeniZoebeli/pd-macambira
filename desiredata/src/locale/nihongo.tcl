#!/usr/bin/env tclsh
# Japanese translations for PureData
# $Id: nihongo.tcl,v 1.1.2.1 2007-08-12 05:56:49 matju Exp $
# by Kentaro Fukuchi and friends

### Menus
say file "ファイル"
  say new_file "新規作成"
  say open_file "ファイルを開く..."
  say server_prefs "サーバー設定..."
  say client_prefs "クライアント設定..."
  say send_message "メッセージ送信..."
  say paths "パス..."
  say close "閉じる"
  say save "保存"
  say save_as "名前を付けて保存..."
  say print "印刷..."
  say abort_server "サーバー停止"
  say quit "終了"

  say canvasnew_file "新規作成"
  say canvasopen_file "ファイルを開く..."
  say canvassave "保存"
  say canvassave_as "名前を付けて保存..."
  say clientpdrc_editor ".pdrc エディター"
  say clientddrc_editor ".ddrc エディター"
  say canvasclose "閉じる"
  say canvasquit "終了"

say edit "編集"
  say undo "元に戻す"
  say redo "やり直し"
  say cut "カット"
  say copy "コピー"
  say paste "ペースト"
  say duplicate "複製"
  say select_all "すべてを選択"
  say clear_selection "選択を解除"
  say text_editor "テキストエディタ..."
  say font "フォント"
  say tidy_up "整列";## tidy up これでよいか？
  say edit_mode "編集モード"
  say editmodeswitch "編集/実行モード切替"
  say subpatcherize "サブパッチ化";## Subpacherizer これでよいか？

  say canvascut "カット"
  say canvascopy "コピー"
  say canvasundo "元に戻す"
  say canvasredo "やり直し"
  say canvaspaste "ペースト"
  say canvasduplicate "複製"
  say canvasselect_all "すべてを選択"
  say canvaseditmodeswitch "編集/実行モード切替"

say view "表示"
  say reload "再読込み"
  say redraw "再描画"

  say canvasreload "再読込み"
  say canvasredraw "再描画"

say find "検索"
  say find_again "再検索"
  say find_last_error "最後のエラーを検索"
  say string "文字列の検索"
say canvasfind "Find"
  say canvasfind_again "再検索"

# contents of Put menu is Phase 5C
say put "挿入";## オブジェクトの挿入というニュアンスでよいか？
  say Object "オブジェクト"
  say Message "メッセージ"
  say Number "ナンバー"
  say Symbol "シンボル"
  say Comment "コメント"
  say Graph "グラフ"
  say Array "配列"

say media "メディア"
  say audio_on "オーディオON"
  say audio_off "オーディオOFF"
  say test_audio_and_midi "オーディオとMIDIのテスト"
  say load_meter "負荷メーター"

  say canvasaudio_on "オーディオON"
  say canvasaudio_off "オーディオOFF"
  say clienttest_audio_and_midi "オーディオとMIDIのテスト"
  say canvasload_meter "負荷メーター"

say window "ウィンドウ"

say help "ヘルプ"
  say about "Desire Dataについて..."
  say documentation "ドキュメント..."
  say class_browser "クラス・ブラウザー..."

  say canvasabout "Desire Dataについて..."

say properties "プロパティ"
say open "開く"

### for key binding editor
say general "一般"
say audio_settings "オーディオの設定"
say midi_settings "MIDIの設定"
say latency_meter "レイテンシ・メーター"
say Pdwindow "Pdウィンドウ"

say canvaspdwindow "Pdウィンドウ"
say canvaslatency_meter "レイテンシ・メーター"
say clientaudio_settings "オーディオの設定"
say clientmidi_settings "MIDIの設定"

### for Properties Dialog (phase 5B)
say_category IEM
say w "幅(px)"
say h "高さ(px)"
say hold "ホールド(ms)"
say break "break time(ms)";## すみません、ニュアンスわかりません
say min "最小値"
say max "最大値"
say is_log "モード"
say linear "線型"
say logarithmic "対数"
say isa "初期化"
say n "number of choices"
say steady "クリック時動作";##Steadiness 意訳でよいか？
say steady_no  "ジャンプ"
say steady_yes "ジャンプ無";##steady on clickこれでよいか？
say snd "送信先シンボル"
say rcv "受信元シンボル"
say lab "ラベル"
say ldx "ラベル x方向オフセット"
say ldy "ラベル y方向オフセット"
say fstyle "フォント"
say fs "サイズ"
say bcol "背景カラー";##「背景色」も検討したが「ラベル色」としないよう統一
say fcol "前景カラー"
say lcol "ラベルカラー"
say yes "はい"
say no "いいえ"
say courier "courier (typewriter)";##フォント名のためママでよいか？
say helvetica "helvetica (sansserif)"
say times "times (serif)"
say coords "描画";##Graph on parent 意訳でよいか？

say_category GAtomProperties
say width "幅"
say lo "最小値"
say hi "最大値"
say label "ラベル"
say wherelabel "ラベル表示位置";##おそらく未使用
say symto "送信先シンボル"
say symfrom "受信元シンボル"

say_category GraphProperties
say x1   "x 開始値"
say x2   "x 終了値"
say xpix "幅"
say y2   "y 開始値"
say y1   "y 終了値"
say ypix "高さ"

say_category CanvasProperties
#say xscale "X ピクセル毎単位";##unitx/px この訳でよいか
#say yscale "Y ピクセル毎単位"
say gop "描画";##この訳でよいか？
say xmargin "xマージン"
say ymargin "yマージン"
say height "高さ"
say_category ArrayProperties
say name "名前"
say n    "サイズ"
say xfrom "x 開始値"
say xto "x 終了値"
say yfrom "y 開始値"
say yto "y 終了値"


say_category MainWindow
say in "in"
say out "out"
say audio "オーディオ"
say meters "メーター"
say io_errors "I/Oエラー"
say tcl_console "Tclクライアント"
say pd_console "Pdサーバー"

### phase 2

say_category Other
say_namespace summary {
  say_category IEMGUI
  say bng    "Bangボックス"
  say tgl    "トグル・ボックス"
  say nbx    "ナンバー・ボックス(IEM)"
  say hsl    "スライダー(水平)"
  say vsl    "スライダー(垂直)"
  say hradio "選択ボックス(水平)"
  say vradio "選択ボックス(垂直)"
  say cnv    "キャンバス(IEM)"
  say dropper "ドラッグ＆ドロップ・ボックス"
  say vu     "VUメーター"

  say_category GLUE
  say bang "Bangを送信"
  say float "数値の保存/読出し"
  say symbol "シンボルの保存/読出し"
  say int "整数の保存/読出し"
  say send "オブジェクトへメッセージを送信"
  say receive "送信されたメッセージの受信"
  say select "数値またはシンボルの一致を検査する"
  say route "先頭の要素を評価し、ルートを分岐する"
  say pack "メッセージを結合する"
  say unpack "結合されたメッセージを分離する"
  say trigger "任意の形式に変換したメッセージを、任意の順で送信"
  say spigot "メッセージをフィルタ"
  say moses "連続する数値を、指定した値を境に分岐して出力"
  say until "ループ機能"
  say print "メッセージを表示"
  say makefilename "変数を含むシンボルをファイル名の形式に変換"
  say change "連続する数値のうち、重複するものをフィルタ"
  say swap "二つの値を入れ替える"
  say value "グローバル変数の保存/読出し"

  say_category TIME
  say delay "メッセージを遅延させる"
  say metro "定期的にメッセージを送信"
  say line "直線的に変化する連続した数値を送信"
  say timer "経過時間を計測"
  say cputime "CPU時間を計測"
  say realtime "実時間を計測"
  say pipe "数値送信に用いる、可変長のディレイラインを作成"

  say_category MATH
  say + "加算"
  say - "減算"
  say * "乗算"
  say {/ div} "除算"
  say {% mod} "余り"
  say pow "対数"
  say == "等号"
  say != "不等号"
  say > "大なり"
  say < "小なり"
  say >= "大なりイコール"
  say <= "小なりイコール"
  say &  "ビット演算 (and)"
  say |  "ビット演算 (or)"
  say && "論理積 (and)"
  say || "論理和 (or)"
  say mtof "MIDIノー・トナンバーを周波数に変換"
  say ftom "周波数をMIDIノート・ナンバーに変換"
  say powtodb "ワット数をdBに変換"
  say dbtopow "dBをワット数に変換"
  say rmstodb "電圧をdBに変換"
  say dbtorms "dBを電圧に変換"
  say {sin cos tan atan atan2 sqrt} "三角関数"
  say log "自然対数"
  say exp "指数関数"
  say abs "絶対値"
  say random "乱数"
  say max "二項のうち、より大きい数"
  say min "二項のうち、より小さい数"
  say clip "数値をしきい値内におさめる"

  say_category MIDI
  say {notein ctlin pgmin bendin touchin polytouchin midiin sysexin} "MIDI入力"
  say {noteout ctlout pgmout bendout touchout polytouchout midiout} "MIDI出力"
  say makenote "ノートオンを送信し、指定した時間経過後にノート・オフを送信"
  say stripnote "連続するノート・オフをフィルター"

  say_category TABLES
  say tabread "テーブルから数値読出し"
  say tabread4 "4点による擬似補間を用いて、テーブルから数値を読出し"
  say tabwrite "テーブルに数値を書込み"
  say soundfiler "テーブルからファイルへ、相互に読出し/書込み"

  say_category MISC
  say loadbang "読込時にBangを送信"
  say serial "シリアル・デバイス・コントロール(NTのみ)"
  say netsend "インターネットを介してメッセージ送信"
  say netreceive "インターネットを介してメッセージ受信"
  say qlist "メッセージ・シーケンサー"
  say textfile "ファイルを読み込みメッセージを生成"
  say openpanel "「ファイルを開く」ダイアログを表示"
  say savepanel "「ファイルを保存」ダイアログを表示"
  say bag "数値の集合を保持"
  say poly "ポリフォニックの入力信号を管理"
  say {key keyup} "キーボード入力のアスキー・コードを送信"
  say keyname "キーボード入力文字を送信"

  say_category "AUDIO MATH"
  foreach word {+ - * /} {say $word~ "[say $word] (シグナル用)"}
  say max~ "シグナルの最大値"
  say min~  "シグナルの最小値"
  say clip~ "シグナルの値をしきい値内に強制変換"
  say q8_rsqrt~ "簡易版平方根の逆数 (注意:8ビット)"
  say q8_sqrt~ "簡易版平方根 (注意:8ビット)"
  say wrap~ "入力値にもっとも近い整数との差 (入力が正の場合は小数部)"
  say fft~ "複素離散フーリエ変換"
  say ifft~ "複素逆離散フーリエ変換"
  say rfft~ "実離散フーリエ変換"
  say rifft~ "逆離散フーリエ変換"
  say framp~ "output a ramp for each block"
  foreach word {mtof ftom rmstodb dbtorms rmstopow powtorms} {
    say $word~ "[say $word] (シグナル用)"
  }
}

### phase 3

say_namespace summary {
  say_category "音声結線"
  say dac~ "音声出力"
  say adc~ "音声入力"
  say sig~ "数値を音声信号に変換"
  say line~ "音声に時間変化の勾配を付加"
  say vline~ "line~の機能拡張版"
  say threshold~  "信号からしきい値を検出"
  say snapshot~ "信号をサンプリング(数値に書き戻す)"
  say vsnapshot~ "snapshot~の機能拡張版"
  say bang~ "BANGメッセージを以降の全てのDSPブロックに出力"

  say samplerate~ "サンプリング周波数を取得"

  say send~ "複数の出力を備えた遠隔接続"
  say receive~ "send~より信号を受け取る"
  say throw~ "加算バス(ミキサ)に追加する"
  say catch~ "加算バス(ミキサ)の内容を読み出す"
  say block~ "ブロックの大きさとオーバーラップを指定"
  say switch~ "DSP処理をオン／オフ"
  say readsf~ "ディスク上の音声ファイルを再生"
  say writesf~ "音声をディスクに記録"

  say_category "オシレータとテーブル"
  say phasor~ "鋸状波オシレータ"
  say {cos~ osc~} "サイン波オシレータ"
  say tabwrite~ "テーブルへ書き込む"
  say tabplay~ "テーブルから再生(移調は伴わない)"
  say tabread~ "補間を行わずにテーブルから読み込む"
  say tabread4~ "四点多項式による補間を行いながらテーブルから読み込む"
  say tabosc4~ "ウェーブテーブルオシレータ"
  say tabsend~ "テーブルへ1ブロックを連続的に書き込む"
  say tabreceive~ "テーブルから1ブロックを連続的に読み出す"

  say_category "フィルタ"
  say vcf~ "電圧制御式バンドパスフィルタ"
  say noise~ "ホワイトノイズ発生器"
  say env~ "エンヴェロープフォロワ　"
  say hip~ "ハイパスフィルタ"
  say lop~ "ローパスフィルタ"
  say bp~ "バンドパスフィルタ"
  say biquad~ "引数により様々な設計ができるフィルタ"
  say samphold~ "サンプルアンドホールド"
  say print~ "ひとつまたは複数のブロックの音声信号をコンソールに表示"
  say rpole~ "単極(再帰)フィルタ"
  say rzero~ "1ゼロ点(非再帰)フィルタ"
  say rzero_rev~ "反転1ゼロ点(非再帰)フィルタ"
  say cpole~ "複素単極(再帰)フィルタ"
  say czero~ "複素1ゼロ点(非再帰)フィルタ"
  say czero_rev~ "複素反転1ゼロ点(非再帰)フィルタ"

  say_category "ディレイ"
  say delwrite~ "ディレイラインに書き込み"
  say delread~ "ディレイラインから読み出す"
  say vd~ "ディレイラインから任意のタイミングで読み出す"

  say_category "サブウインドウ"
  say pd "サブウインドウを定義"
  say table "サブウインドウ内で数値を配列"
  say inlet "サブウインドウ内へ結線"
  say outlet "サブウインドウ外へ結線"
  say  inlet~  "サブウインドウ内へ結線(音声信号用)"
  say outlet~ "サブウインドウ外へ結線(音声信号用)"

  say_category "データテンプレート"
  say struct "データの構造を定義"
  say {drawcurve filledcurve} "曲線を描く"
  say {drawpolygon filledpolygon} "多角形を描く"
  say plot "配列を描画"
  say drawnumber "数値を表示"

  say_category "データアクセス"
  say pointer "テンプレートに属するオブジェクトを指定"
  say get "数値データを取得"
  say set "数値データを任意の値に書き換え"
  say element "配列の要素を取得"
  say getsize "配列の大きさを取得"
  say setsize "配列の大きさを変更"
  say append "リストに要素を付加"
  say sublist "リストからポインタを取得(これは他のスケーラの一要素です)"
  say scalar "スケーラを親ウインドウに表示"
  
  say_category "もう使う必要のないもの"
  say scope~ "(tabwrite~に統合されました)"
  say namecanvas "" ;# what was this anyway?　正直、これってなんだっけ？
  say template "(structに統合されました)"
}

# phase 4 (pdrc & ddrc)

say section_audio "オーディオ"
  say -r "サンプリング周波数"
  say -audioindev "音声入力デバイス"
  say -audiooutdev "音声出力デバイス"
  say -inchannels "音声入力チャンネル(デバイスによる。例えば“2”や“16,8”のように。)"
  say -outchannels "音声出力チャンネル(入力に同じ)"
  say -audiobuf "音声バッファの大きさをミリ秒で定義"
  say -blocksize "音声入力/出力のブロックの大きさをサンプルフレーム数で定義"
  say -sleepgrain "ミリ秒で定義される値をアイドル時にスリープさせる"
  say -nodac "音声出力を停止"
  say -noadc "音声入力を停止"
  say audio_api_choice "オーディオAPI"
    say default "デフォルト"
    say -alsa "オーディオAPIとしてALSAを使う"
    say -jack "オーディオAPIとしてJACKを使う"
    say -mmio "オーディオAPIとしてMMIOを使う(Windows標準)"
    say -portaudio "ASIOドライバを使う(Portaudioを通じて)"
    say -oss "オーディオAPIとしてOSSを使う"
  say -32bit "32ビットのOSSオーディオを許可する(RME Hammerfallのみ)"
  say {} "デフォルト"

say section_midi "MIDI"
  say -nomidiin "MIDI入力を停止"
  say -nomidiout "MIDI出力を停止"
  say -midiindev  "MIDIインデバイスのリスト(用例：“1,3”で1番目と3番目)"
  say -midioutdev "MIDIアウトデバイスのリスト(用例：“1,3”で1番目と3番目)"

say section_externals "エクスターナル"
  say -path     "ファイルの検索パス"
  say -helppath "ヘルプファイルの検索パス"
  say -lib      "オブジェクトのライブラリをロード"

say section_gui "GUI"
  say -nogui "GUIなしで起動する(危険です)"
  say -guicmd "他のGUIプログラムと置き換える(例えばrshのような)"
  say -look "ボタンバーのアイコン"
  say -font "起動時のフォントのサイズをpointで定義"

say section_other "その他"
  say -open "起動時にファイルを開く"
  say -verbose "起動時とファイル検索時のコンソールへの表示を詳細化"
  say -d "デバッグレベル"
  say -noloadbang "“loadbang”を無効にする"
  say -send "起動時にメッセージを送信する(全てのパッチが読み込まれた直後に)"
  say -listdev "オーディオデバイスとMIDIデバイスのリストを起動時に表示する"
  say -realtime "優先度を最優先にする(管理者権限が必要)"

say section_paths "パス"

# phase 4B: ddrc (keyword names not finalized!)
say console "コンソールウインドウの表示行数 (0 = コンソールを停止)"
say lang "使用言語"
say pointer_sense "マウス感度"
say section_color "アピアランス"
 say canvas_color "カンバス"
  say canvasbgedit "カンバス背景(エディットモード時)"
  say canvasbgrun "カンバス背景(実行モード時)"
 say object_color "オブジェクト"
  say viewframe1 "オブジェクトボックスの色"
  say viewframe2 "オブジェクトボックスの色"
  say viewframe3 "オブジェクトボックスの色"
  say viewframe4 "オブジェクトボックス選択時の色"
  say viewbg "オブジェクト背景"
  say viewfg "オブジェクト前景"
  say commentbg "コメント背景"
  say commentfg "コメント前景"
  say commentframe1 "コメントフレーム"
  say commentframe2 "コメントフレーム"
  say commentframe3 "コメントフレーム"
  say viewselectframe "選択されたボックス"
 say wire_color "結線"
  say wirefg "結線色"
  say wirefg2 "選択された結線"
  say wiredspfg "音声信号用結線の色"
  say futurewiredash "新規結線"
 say others_color "その他"
  say boxinletfg "インレットの色"
  say boxoutletfg "アウトレットの色"
  say selrectrect "セレクションボックス"
say keys "キー"
say others "その他"
say hairstate "十字型カーソルを表示"
say hairsnap "十字型カーソルをオブジェクトにスナップ"
say statusbar "ステータスバーを表示"
say buttonbar "ボタンバーを表示"
say menubar "メニューバーを表示"
say scrollbar "オートスクロールバーを表示"
say wirearrow "結線端の信号の方向を示す矢印"
say tooltip "ツールチップ"
say insert_object "オブジェクトを挿入"
say chain_object "オブジェクトを繋ぐ"
say clear_wires "結線を全て外す"
say auto_wire "オブジェクトを消去"
say subpatcherize "サブパッチとして独立させる"
say keynav "キーボードナビゲーション"
say key_nav_up "上へ移動"
say key_nav_up_shift "上へ移動して選択"
say key_nav_down "下へ移動"
say key_nav_down_shift "下へ移動して選択"
say key_nav_right "右へ移動"
say key_nav_right_shift "右へ移動して選択"
say key_nav_left "左へ移動"
say key_nav_left_shift "左へ移動して選択"
say key_nav_ioselect "インレット／アウトレットを選択"

# phase 5A

say cannot "不可能です"
say cancel "キャンセル"
say apply  "適用する"
say ok     "OK"
say popup_open "開く"
say popup_insert "挿入する"
say popup_properties "プロパティ"
say popup_clear_wires "結線を全て外す"
say popup_remove_from_path "パスからオブジェクトを外す"
say popup_delete_from_path "パスからオブジェクトを消去する"
say popup_help "ヘルプ"
say filter "フィルタ: "
say how_many_object_classes "%2\$d 中 %1\$d 個のオブジェクトクラス"
say do_what_i_mean "言ったとおりにやってよね"
say ask_cool "マジでこの機能を使う事が出来たならなぁ．．．"
say save_changes? "変更を保存しますか？"
say reset "リセット"
say Courier "Courier (monospaced)"
say Helvetica "Helvetica (sansserif)"
say Times "Times (serif)"
say add "追加"
say up "上へ"
say down "下へ"
say remove "消去"
say lib_add    "リストに書いた名前を加える"
say lib_up     "前のライブラリと順番を入れ替える"
say lib_down   "次のライブラリと順番を入れ替える"
say lib_remove "リスト中の選択されたライブラリを外す"
say dir_add    "ダイアログを使ってフォルダを加える"
say dir_up     "前のフォルダと順番を入れ替える"
say dir_down   "次のフォルダと順番を入れ替える"
say dir_remove "リスト中の選択されたフォルダを外す"
say client_class_tree "クライアント構成"
say clipboard_view "クリップボードを表示"
say command_history_view "操作履歴を表示"
say event_history_view "イベント履歴を表示"

# during/after piksel:

say auto_apply "自動的に適用する"
say font_preview "プレビュー:"
say font_preview_2 "ABCDEFGHIJKLMNOPQRSTUVWXYZ\nabcdefghijklmnopqrstuvwxyz\n0123456789"
say font_style "スタイル:"
say font_bold "太字"
say font_italic "斜体"
say font_family "名前:"
say font_size "大きさ:"
say damn "最低！"
say console_clear "コンソールをクリア"
say horizontal "水平方向"
say vertical "鉛直方向"
say language "言語"

# 2007:

say no_matches "(適合するものなし)"
say preset "プリセット"
say canvasgrid "グリッドの色"
say grid_size "グリッドの大きさ"
say gridstate "背景にグリッドを表示"
say snap_grid "グリッドにスナップ"
say viewfont "オブジェクトのフォント"
say consolefont "コンソールのフォント"
say keyboarddialogfont "仮想キーボードのフォント"
say keyboard_view "仮想キーボード"

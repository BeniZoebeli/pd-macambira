#!/usr/bin/env tclsh
# German translations for PureData
# $Id: deutsch.tcl,v 1.1.2.13 2006-11-25 01:45:05 matju Exp $
# by Max Neupert, Georg Holzmann, Thomas Grill

say file "Datei"
  say new_file "Neu"
  say open_file "Öffnen..."
  say pdrc_editor ".pdrc Editor"
  say send_message "Sende Nachricht..." ;# georg&foo say "Message"
  say paths "Pfade..."
  say close "Schließen"
  say save "Speichern"
  say save_as "Speichern Unter..."
  say print "Drucken..."
  say quit "Beenden"

say edit "Bearbeiten"
  say undo "Rückgängig"
  say redo "Wiederherstellen"
  say cut "Ausschneiden"
  say copy "Kopieren"
  say paste "Einfügen"
  say duplicate "Duplizieren"
  say select_all "Alles auswählen"
  say text_editor "Texteditor..."
  say tidy_up "Aufräumen"
  say edit_mode "Editiermodus" ;# georg says "Edit Modus"

say view "Ansicht"
  say reload "Neu Laden"
  say redraw "Neu Zeichnen"

say find "Suchen"
  say find_again "Weitersuchen" ;# georg: "Suche Nochmal"
  say find_last_error "Finde letzten Fehler" ;# georg: "Finde Letzten Error"

say put "Erstelle"

say media "Media"
  say audio_on "Audio AN"
  say audio_off "Audio AUS"

say window "Fenster"

say help "Hilfe"
  say about "Über..."
  say pure_documentation "Pure Documentation..."
  say class_browser "Class Browser..."



### Main Window

say in "Eingang"
say out "Ausgang"
say audio "Audio"
say meters "Pegel"
say io_errors "IO Fehler"


say_namespace summary {
  say_category "IEMGUI"
  say bng    "Bang-Feld"
  say tgl    "Schalter"
  say nbx    "Zahlenfeld (IEM)"
  say hsl    "Schieberegler (Horizontal)"
  say vsl    "Schieberegler (Vertical)"
  say hradio "Radioknopf (Horizontal)"
  say vradio "Radioknopf (Vertical)"
  say cnv    "Hintergrund (IEM)"
  say vu     "VU-Pegel"
  say dropper "\"Drag-and-Drop\" Box"

  say_category "GLUE"
  say bang "Bang-Nachricht ausgeben"
  say float "Zahl speichern und abrufen"
  say symbol "Symbol speichern und abrufen"
  say int "Ganzzahl speichern und abrufen"
  say send "Nachricht an benanntes Objekt schicken"
  say receive "Nachrichten empfangen"
  say select "auf übereinstimmende Symbole oder Zahlen prüfen"
  say route "Nachrichten gemäß ihrem ersten Element umleiten"
  say pack "Nachrichten packen"
  say unpack "gepackte Nachrichten auflösen"
  say trigger "Nachrichten auslösen und umwandeln"
  say spigot "eine steuerbare Nachrichtenverbindung"
  say moses "einen Zahlenstrom aufteilen"
  say until "Schleife"
  say print "Ausgabe in Konsole umleiten"
  say makefilename "Symbol mit Variable formatieren"
  say change "entfernt wiederholte Nachrichten"
  say swap "zwei Zahlen austauschen"
  say value "gemeinsamer Zahlenspeicher"

  say_category "TIME"
  say delay "verzögert Nachrichten"
  say metro "sendet Nachrichten im Takt"
  say line "interpoliert zwischen zwei Zahlen"
  say timer "misst Zeitabstände"
  say cputime "Prozessorzeit-Messung"
  say realtime "Echtzeit-Messung"
  say pipe "dynamisch verlängerbare Verzögerungsstrecke"

  say_category "MATH"
  say + "addieren"
  say - "subtrahieren"
  say * "multiplizieren"
  say {/ div} "dividieren"
  say {% mod} "Divisionsrest"
  say pow "potenzieren"
  say == "gleich?"
  say != "ungleich?"
  say > "größer als?"
  say < "kleiner als?"
  say >= "größer gleich?"
  say <= "kleiner gleich?"
  say &  "bitweise UND-Funktion"
  say |  "bitweise ODER-Funktion"
  say && "logische UND-Funktion "
  say || "logische ODER-Funktion"
  say mtof "MIDI zu Hertz Umrechnung"
  say ftom "Hertz zu MIDI Umrechnung"
  say powtodb "Watt zu dB Umrechnung"
  say dbtopow "dB zu Watt Umrechnung"
  say rmstodb "Volt zu dB Umrechnung"
  say dbtorms "dB zu Volt Umrechnung"
  say {sin cos tan atan atan2 sqrt} "Trigonometrie"
  say log "natürlicher Logarithmus"
  say exp "Exponentialfunktion"
  say abs "absoluter Wert"
  say random "Zufallszahl"
  say max "größere zweier Zahlen"
  say min "kleinere zweier Zahlen"
  say clip "Begrenzung einer Zahlenreihe"

  say_category "MIDI"
  say {notein ctlin pgmin bendin touchin polytouchin midiin sysexin} \
"MIDI Eingang"
  say {noteout ctlout pgmout bendout touchout polytouchout midiout} \
"MIDI Ausgang"
  say makenote \
       "eine verzögerte \"note off\" Nachricht nach einer \"noteon\"-Nachricht einplanen"
  say stripnote "entferne \"note off\" Nachrichten"

  say_category "TABLES"
  say tabread "liest Zahl aus einer Tabelle"
  say tabread4 "liest Zahl aus einer Tabelle, mit 4-Punkt-Interpolation"
  say tabwrite "schreibt Zahl in eine Tabelle"
  say soundfiler "schreibt und liest Samples in/aus einer Tabelle"

  say_category "MISC"
  say loadbang "Bang beim Öffnen der Datei"
  say serial "Serielle Schnittstelle, nur NT"
  say netsend "sendet Nachrichten über das Netzwerk"
  say netreceive "empfängt Nachrichten über das Netzwerk"
  say qlist "Nachrichten-Sequenzer"
  say textfile "Datei zu Nachricht Übersetzung"
  say openpanel "\"Öffnen...\" Dialog"
  say savepanel "\"Speichern unter...\" Dialog"
  say bag "Zahlenpaar"
  say poly "Polyphone Stimmenbelegung"
  say {key keyup} "Numerische Tastenwerte der Tastatur"
  say keyname "Symbolischer Tastenname"

  say_category "AUDIO MATH"
  foreach word {+ - * /} {say $word~ "[say $word] (für Audiosignale)"}
  say max~ "Maximum eines Audiosignals"
  say min~  "Minimum eines Audiosignals"
  say clip~ "begrenzt ein Audiosignal von unten und oben"
  say q8_rsqrt~ "schnelle reziproke Quadratwurzel (Achtung! - 8 Bit)"
  say q8_sqrt~ "schnelle Quadratwurzel (Achtung! - 8 Bit)"
  say wrap~ "wraparound (fractional part, sort of)"
  say fft~ "komplexe Fouriertransformation vorwärts"
  say ifft~ "komplexe inverse Fast-Fouriertransformation"
  say rfft~ "reelle Fouriertransformation vorwärts"
  say rifft~ "reelle inverse Fast-Fouriertransformation"
  say framp~ "erzeugt eine Rampe für jeden Block"
  foreach word {mtof ftom rmstodb dbtorms rmstopow powtorms} {
    say $word~ "[say $word] (für Audiosignale)"
  }
}

### phase 3

say_namespace summary {
  say_category "AUDIO GLUE"
  say dac~ "Audio Ausgabe"
  say adc~ "Audio Eingabe"
  say sig~ "wandelt Zahlen in Audiosignal um"
  say line~ "generiert Audio Rampen"
  say vline~ "deluxe line~"
  say threshold~ "erkennt Schwellenwerte des Audiosignals"
  say snapshot~ "tastet ein Audiosignal ab (konvertiert es zu Zahlen)"
  say vsnapshot~ "deluxe snapshot~"
  say bang~ "sendet Bang nach jedem DSP-Block"
  say samplerate~ "gibt die Abtastrate aus"
  say send~ "nonlocal signal connection with fanout"
  say receive~ "empfängt Audiosignal von send~"
  say throw~ "fügt Audiosignal zu einem sich summierenden Bus zu"
  say catch~ "definiert und liest einen Bus"
  say block~ "legt Block-Größe und Überlappung fest"
  say switch~ "schaltet DSP-Berechnung an/aus"
  say readsf~ "spielt Audiodateien von Festplatte ab"
  say writesf~ "nimmt Audio auf Festplatte auf"

  say_category "AUDIO-OSZILLATOREN AND TABELLEN"
  say phasor~ "Sägezahn-Oszillator"
  say {cos~ osc~} "Cosinus-Oszillator"
  say tabwrite~ "in eine Tabelle schreiben"
  say tabplay~ "aus einer Tabelle abspielen (nicht-transponierend)"
  say tabread~ "Tabelle auslesen (ohne Interpolation)"
  say tabread4~ "Tabelle auslesen (mit Vier-Punkt Interpolation)"
  say tabosc4~ "wavetable Oszillator"
  say tabsend~ "einen Block kontinuierlich in eine Tabelle schreiben"
  say tabreceive~ "einen Block kontinuierlich aus einer Tabelle lesen"

  say_category "AUDIO FILTER"
  say vcf~ "Spannungsgesteuerter Filter"
  say noise~ "generiert weißes Rauschen"
  say env~ "Hüllkurven-Abtaster"
  say hip~ "Hochpassfilter"
  say lop~ "Tiefpassfilter"
  say bp~ "Bandpassfilter"
  say biquad~ "grober Filter"
  say samphold~ "sample and hold unit"
  say print~ "print out one or more \"blocks\""
  say rpole~ "raw real-valued one-pole filter"
  say rzero~ "raw real-valued one-zero filter"
  say rzero_rev~ "[say rzero~] (time-reversed)"
  say cpole~ "[say rpole~] (complex-valued)"
  say czero~ "[say rzero~] (complex-valued)"
  say czero_rev~ "[say rzero_rev~] (complex-valued)"

  say_category "AUDIO VERZÖGERUNG"
  say delwrite~ "in eine Verzögerungsstrecke schreiben"
  say delread~ "von einer Verzögerungsstrecke lesen"
  say vd~ "von einer Verzögerungsstrecke in variabler Verzögerungszeit lesen"

  say_category "UNTERFENSTER"
  say pd "definiere ein Unterfenster"
  say table "Zahlentabelle in einem Unterfenster"
  say inlet "Eingang hinzufügen"
  say outlet "Ausgang hinzufügen"
  say  inlet~  "[say inlet] (für Audiosignale)"
  say outlet~ "[say outlet] (für Audiosignale)"

  say_category "DATA TEMPLATES"
  say struct "define a data structure"
  say {drawcurve filledcurve} "zeichnet eine Kurve"
  say {drawpolygon filledpolygon} "zeichnet ein Polygon"
  say plot "plot an array field"
  say drawnumber "einen Zahlenwert ausgeben"

  say_category "DATENZUGRIFF"
  say pointer "point to an object belonging to a template"
  say get "get numeric fields"
  say set "legt Wert in Zahlenfeldern fest"
  say element "get an array element"
  say getsize "Größe eines Arrays feststellen"
  say setsize "Größe eines Arrays bestimmen"
  say append "Element an eine Liste anfügen"
  say sublist "get a pointer into a list which is an element of another \
scalar"
  say scalar "draw a scalar on parent"

  say_category "ÜBERHOLT"
  say scope~ "(benutze tabwrite~ anstatt)"
  say namecanvas "" ;# what was this anyway?
  say template "(benutze struct anstatt)"
}

say cannot "kann nicht"

say filter "Filter" ;# sorry
say how_many_object_classes "%d/%d"

say save_changes? "Änderungen speichern?"



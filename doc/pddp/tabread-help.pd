#N canvas 2 1 648 608 12;
#X obj 114 560 pddp;
#X obj 8 3 cnv 15 90 578 empty empty empty 20 12 0 14 -233017 -66577
0;
#X text 14 223 ARGUMENTS:;
#X text 19 323 EXAMPLES:;
#X text 22 471 SEE ALSO:;
#N canvas 58 0 405 254 Related_Objects 0;
#X text 25 11 Native Pd Objects;
#X text 16 166 Externals and other object libraries;
#X obj 16 41 tabread~;
#X obj 90 41 tabread4;
#X obj 165 41 tabwrite;
#X obj 240 41 tabwrite~;
#X obj 16 67 tabsend~;
#X obj 92 67 tabreceive~;
#X obj 192 67 tabplay~;
#X obj 269 67 table;
#X text 15 124 [array];
#X obj 16 94 soundfiler;
#X text 78 124 and fft objects.;
#X text 21 187 [tabdump];
#X obj 112 94 tabread4~;
#X text 20 207 [tabenv];
#X obj 203 94 getsize;
#X obj 274 94 setsize;
#X text 238 207 [arraysize];
#X text 238 186 [score];
#X text 114 186 [linear_path];
#X text 114 207 [plot];
#X restore 114 508 pd Related_Objects;
#N canvas 80 0 655 534 More_Info 0;
#X text 25 16 WHAT IS THE DIFFERENCE BETWEEN A TABLE AND AN ARRAY AND
A GRAPH AND A TEMPLATE AND A LIST AND A SCALAR AND A WIDGET?;
#X text 43 56 That question isn't relevant yet \, but I know you're
probably asking it. Let's just set aside these terms and their uses
and say the following:;
#X text 67 114 1 In Pd \, the terms "graph" and "table" are almost
synonymous.;
#X text 66 164 2 A table in Pd is a convenient place to store an array.
;
#X text 65 392 5 For more discussion about arrays and tables \, please
see the help documentation in: doc/2.control.examples/15.arrays.pd
and doc/5.reference/table.pd;
#X text 44 487 Also See:;
#X obj 123 487 pddp/pddplink all_about_arrays.pd -text all_about_arrays;
#X text 66 195 3 When you create a table \, an array of 100 elements
is automatically created inside that table. The name of the table and
the name of the array are stored separately. This means \, that although
the table has the same name as the default array \, you can rename
one or the other individually.;
#X text 66 307 4 [tabread] is designed to read the numbers from arrays
- whether they're stored in tables or not! Perhaps we can think of
this object as [arrayread] instead? Keep in mind that arrays can be
created separately from tables.;
#X restore 114 534 pd More_Info;
#X obj 32 10 tabread;
#X text 111 10 - READ NUMBERS FROM A TABLE;
#X text 104 277 One - outputs a floating point number which corresponds
to the index you query using the inlet.;
#X obj 161 416 tabread davids_table;
#X floatatom 161 443 0 0 0 3 - - -;
#X floatatom 116 364 0 0 99 1 index - -;
#X msg 241 391 set another_table;
#X msg 203 366 set davids_table;
#X text 105 168 Set - the "set <arrayname>" message allows you to read
from dynamic sources. You can change the source at any time using the
"set" message.;
#X text 105 223 One - the argument informs [tabread] which array to
read. The array must exist in an open Pd patch/canvas or an error message
will appear in the terminal window.;
#X text 29 278 OUTLETS:;
#X text 410 433 tables which store \; arrays of the same name.;
#X obj 413 384 table davids_table;
#X obj 413 410 table another_table;
#X text 113 443 value;
#X text 158 561 - Dave Sabine \, April 25 \, 2003;
#X text 106 323 Open the tables and use your mouse to draw new values
in the arrays - otherwise [tabread] will always output "0".;
#X text 39 34 INLETS:;
#X text 107 34 Float - A float at the left inlet will move to the corresponding
index in the table's array. The lowest valid number is "0" which represents
the first element of the array. The highest valid number is the size
of the array minus 1 By default \, the size of an array in a table
is 100 - or 0 to 99 The actual size of the array can be altered using
the array's dialog box or the resize command. More about arrays can
be found below.;
#X text 112 470 doc/2.control.examples/15.arrays.pd;
#X text 113 489 doc/2.control.examples/16.more.arrays.pd;
#X connect 10 0 11 0;
#X connect 12 0 10 0;
#X connect 13 0 10 0;
#X connect 14 0 10 0;

# flext - C++ layer for Max/MSP and pd (pure data) externals
# Copyright (c) 2001-2003 Thomas Grill (xovo@gmx.net)
#
# Makefile for gcc @ darwin
# 
# usage:
# to build run "make -f makefile.pd-darwin"
# to install (as root), do "make -f makefile.pd-darwin install"
#

CONFIG=config-pd-darwin.txt

include ${CONFIG}

# compiler+linker stuff 
INCLUDES=${PDPATH}
FLAGS=-DFLEXT_SYS=2 -Wno-unused -Wno-parentheses -Wno-switch -Wstrict-prototypes
FLAGS+=${UFLAGS}
CFLAGS=-O6 
CFLAGS_D=-g
CFLAGS_T=-DFLEXT_THREADS
LIBS=gcc 


# ----------------------------------------------
# the rest can stay untouched
# ----------------------------------------------

NAME=flext

SRCDIR=source

# all the source files from the package
include make-files.txt

ifdef SNDOBJ
INCLUDES+=$(SNDOBJ)
SRCS+=$(SRCS_SNDOBJ)
HDRS+=$(HDRS_SNDOBJ)
endif

ifdef STK
INCLUDES+=$(STK)
SRCS+=$(SRCS_STK)
HDRS+=$(HDRS_STK)
endif

# for FLEXT_USE_SIMD
CFLAGS+=-framework Carbon -framework veclib -Fveclib -FCarbon

MAKEFILE=makefile.pd-darwin
ifdef V4_NAMING
TARGET=$(TARGDIR)/lib$(NAME).a
TARGET_D=$(TARGDIR)/lib$(NAME)_d.a
TARGET_T=$(TARGDIR)/lib$(NAME)_t.a
TARGET_TD=$(TARGDIR)/lib$(NAME)_td.a
else
TARGET=$(TARGDIR)/$(NAME).a
TARGET_D=$(TARGDIR)/$(NAME)_d.a
TARGET_T=$(TARGDIR)/$(NAME)_t.a
TARGET_TD=$(TARGDIR)/$(NAME)_td.a
endif
TARGET_S=$(TARGDIR)/lib$(NAME).dylib
TARGET_SD=$(TARGDIR)/lib$(NAME)_d.dylib

all: $(TARGDIR) $(TARGET) $(TARGET_D) $(TARGET_T) $(TARGET_TD)   $(TARGET_S) $(TARGET_SD)

$(TARGDIR):
	mkdir $(TARGDIR)

$(patsubst %,$(SRCDIR)/%,$(SRCS)): $(patsubst %,$(SRCDIR)/%,$(HDRS)) $(patsubst %,$(SRCDIR)/%,$(IHDRS)) $(MAKEFILE) $(CONFIG)
	touch $@

$(TARGDIR)/%.o : $(SRCDIR)/%.cpp
	$(CXX) -c -dynamic $(CFLAGS) $(FLAGS) $(patsubst %,-I%,$(INCLUDES) $(SRCDIR)) $< -o $@

$(TARGDIR)/%.do : $(SRCDIR)/%.cpp
	$(CXX) -c -dynamic $(CFLAGS_D) $(FLAGS) $(patsubst %,-I%,$(INCLUDES) $(SRCDIR)) $< -o $@

$(TARGDIR)/%.to : $(SRCDIR)/%.cpp
	$(CXX) -c -dynamic $(CFLAGS) $(CFLAGS_T) $(FLAGS) $(patsubst %,-I%,$(INCLUDES) $(SRCDIR)) $< -o $@

$(TARGDIR)/%.tdo : $(SRCDIR)/%.cpp
	$(CXX) -c -dynamic $(CFLAGS_D) $(CFLAGS_T) $(FLAGS) $(patsubst %,-I%,$(INCLUDES) $(SRCDIR)) $< -o $@

$(TARGDIR)/%.so : $(SRCDIR)/%.cpp
	$(CXX) -c -dynamic $(CFLAGS) $(CFLAGS_T) $(FLAGS) -DFLEXT_SHARED $(patsubst %,-I%,$(INCLUDES) $(SRCDIR)) $< -o $@

$(TARGDIR)/%.sdo : $(SRCDIR)/%.cpp
	$(CXX) -c -dynamic $(CFLAGS_D) $(CFLAGS_T) $(FLAGS) -DFLEXT_SHARED $(patsubst %,-I%,$(INCLUDES) $(SRCDIR)) $< -o $@

$(TARGET) : $(patsubst %.cpp,$(TARGDIR)/%.o,$(SRCS)) 
	libtool -static -o $@ $^

$(TARGET_D) : $(patsubst %.cpp,$(TARGDIR)/%.do,$(SRCS)) 
	libtool -static -o $@ $^

$(TARGET_T) : $(patsubst %.cpp,$(TARGDIR)/%.to,$(SRCS))
	libtool -static -o $@ $^

$(TARGET_TD) : $(patsubst %.cpp,$(TARGDIR)/%.tdo,$(SRCS))
	libtool -static -o $@ $^

$(TARGET_S) : $(patsubst %.cpp,$(TARGDIR)/%.so,$(SRCS))
	ld -dylib -dynamic -flat_namespace -undefined suppress -lgcc -lstdc++ -ldylib1.o -o $@ $^

$(TARGET_SD) : $(patsubst %.cpp,$(TARGDIR)/%.sdo,$(SRCS))
	ld -dylib -dynamic -flat_namespace -undefined suppress -lgcc -lstdc++ -ldylib1.o -o $@ $^

.PHONY: clean install

clean:
	rm -f $(TARGDIR)/*.{o,do,to,tdo,so,sdo} $(TARGET) $(TARGET_D) $(TARGET_T) $(TARGET_TD) $(TARGET_S) $(TARGET_SD)
	
ifdef INSTDIR
$(INSTDIR):
	-mkdir $(INSTDIR)

install:: $(INSTDIR)
endif

install:: $(TARGET) $(TARGET_D) $(TARGET_T) $(TARGET_TD) $(TARGET_S) $(TARGET_SD) $(patsubst %,$(SRCDIR)/%,$(HDRS)) 
	cp $^ $(INSTDIR)
	mv $(INSTDIR)/lib*.dylib /usr/local/lib
	ranlib $(INSTDIR)/*.a  # have to rerun ranlib at install dir ?!
#	chmod 755 $(patsubst %,$(INSTDIR)/%,$(notdir $^))
#	chgrp admin $(patsubst %,$(INSTDIR)/%,$(notdir $^))











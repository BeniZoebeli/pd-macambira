# flext - C++ layer for Max/MSP and pd (pure data) externals
# Copyright (c) 2001-2003 Thomas Grill (xovo@gmx.net)
#
# Makefile for gcc @ linux
#
# usage:
# to build run "make -f makefile.pd-linux"
# to install (as root), do "make -f makefile.pd-linux install"
#

CONFIG=config-pd-linux.txt

include ${CONFIG}

# compiler+linker stuff 
INCLUDES=${PDPATH}

# general compiler flags
FLAGS=-DFLEXT_SYS=2 ${UFLAGS}

# compiler flags for optimized build
CFLAGS=-O6 

# compiler flags for debug build
CFLAGS_D=-g      

# additional flags for threading
CFLAGS_T=-DFLEXT_THREADS  

# additional flags for shared library
CFLAGS_S=-DFLEXT_SHARED -DFLEXT_EXPORTS

# libraries
LIBS=

# ----------------------------------------------
# the rest can stay untouched
# ----------------------------------------------

NAME=flext
SRCDIR=./source

# all the source files from the package
include make-files.txt

ifdef SNDOBJ
INCLUDES+=${SNDOBJ}
SRCS+=${SRCS_SNDOBJ}
HDRS+=${HDRS_SNDOBJ}
LIBS+=sndobj
endif

ifdef STK
INCLUDES+=${STK}
SRCS+=${SRCS_STK}
HDRS+=${HDRS_STK}
LIBS+=stk
endif

MAKEFILE=makefile.pd-linux

ifdef V4_NAMING
TARGET=${TARGDIR}/${NAME}.a 
TARGET_D=${TARGDIR}/${NAME}_d.a
TARGET_T=${TARGDIR}/${NAME}_t.a
TARGET_TD=${TARGDIR}/${NAME}_td.a
else
TARGET=${TARGDIR}/lib${NAME}.a 
TARGET_D=${TARGDIR}/lib${NAME}_d.a
TARGET_T=${TARGDIR}/lib${NAME}_t.a
TARGET_TD=${TARGDIR}/lib${NAME}_td.a
endif
TARGET_S=${TARGDIR}/lib${NAME}.so
TARGET_SD=${TARGDIR}/lib${NAME}_d.so

all: $(TARGDIR) $(TARGET) $(TARGET_D) $(TARGET_T) $(TARGET_TD) $(TARGET_S) $(TARGET_SD)

$(TARGDIR):
	mkdir $(TARGDIR)

$(patsubst %,$(SRCDIR)/%,$(SRCS)): $(patsubst %,$(SRCDIR)/%,$(HDRS)) $(patsubst %,$(SRCDIR)/%,$(IHDRS)) $(MAKEFILE) $(CONFIG)
	touch $@

$(TARGDIR)/%.ro : $(SRCDIR)/%.cpp
	$(CXX) -c $(CFLAGS) $(FLAGS) $(patsubst %,-I%,$(INCLUDES) $(SRCDIR)) $< -o $@

$(TARGDIR)/%.do : $(SRCDIR)/%.cpp
	$(CXX) -c $(CFLAGS_D) $(FLAGS) $(patsubst %,-I%,$(INCLUDES) $(SRCDIR)) $< -o $@

$(TARGDIR)/%.tro : $(SRCDIR)/%.cpp
	$(CXX) -c $(CFLAGS) $(CFLAGS_T) $(FLAGS) $(patsubst %,-I%,$(INCLUDES) $(SRCDIR)) $< -o $@

$(TARGDIR)/%.tdo : $(SRCDIR)/%.cpp
	$(CXX) -c $(CFLAGS_D) $(CFLAGS_T) $(FLAGS) $(patsubst %,-I%,$(INCLUDES) $(SRCDIR)) $< -o $@

$(TARGDIR)/%.sro : $(SRCDIR)/%.cpp
	$(CXX) -c $(CFLAGS) $(CFLAGS_T) $(CFLAGS_S) $(FLAGS) $(patsubst %,-I%,$(INCLUDES) $(SRCDIR)) $< -o $@

$(TARGDIR)/%.sdo : $(SRCDIR)/%.cpp
	$(CXX) -c $(CFLAGS_D) $(CFLAGS_T) $(CFLAGS_S) $(FLAGS) $(patsubst %,-I%,$(INCLUDES) $(SRCDIR)) $< -o $@




$(TARGET) : $(patsubst %.cpp,$(TARGDIR)/%.ro,$(SRCS)) 
	ar rc $@ $^ 
	chmod 644 $@

$(TARGET_D) : $(patsubst %.cpp,$(TARGDIR)/%.do,$(SRCS)) 
	ar rc $@ $^ 
	chmod 644 $@

$(TARGET_T) : $(patsubst %.cpp,$(TARGDIR)/%.tro,$(SRCS))
	ar rc $@ $^
	chmod 644 $@

$(TARGET_TD) : $(patsubst %.cpp,$(TARGDIR)/%.tdo,$(SRCS))
	ar rc $@ $^
	chmod 644 $@

$(TARGET_S) : $(patsubst %.cpp,$(TARGDIR)/%.sro,$(SRCS))
	ld -shared -Bdynamic --strip-debug $(patsubst %,-L%,$(LIBPATH)) $(patsubst %,-l%,$(LIBS)) -o $@ $^
	chmod 755 $@

$(TARGET_SD) : $(patsubst %.cpp,$(TARGDIR)/%.sdo,$(SRCS))
	ld -shared -Bdynamic $(patsubst %,-L%,$(LIBPATH)) $(patsubst %,-l%,$(LIBS)) -o $@ $^
	chmod 755 $@


.PHONY: clean install

clean:
	rm -f $(TARGDIR)/*.{ro,do,tro,tdo,sro,sdo} $(TARGET) $(TARGET_D) $(TARGET_T) $(TARGET_TD) $(TARGET_S) $(TARGET_SD)
	
ifdef INSTDIR
$(INSTDIR):
	-mkdir $(INSTDIR)

install:: $(INSTDIR)
endif

install:: $(TARGET) $(TARGET_D) $(TARGET_T) $(TARGET_TD) $(TARGET_S) $(TARGET_SD)  $(patsubst %,$(SRCDIR)/%,$(HDRS))
	cp $^ $(INSTDIR)
	chmod a+r $(patsubst %,$(INSTDIR)/%,$(notdir $^))
	chown root.users $(patsubst %,$(INSTDIR)/%,$(notdir $^))

